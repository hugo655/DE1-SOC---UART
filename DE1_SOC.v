
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire [7:0]  recv_byte, tx_byte;
wire [7:0] bsr2decoder0,bsr2decoder1,bsr2decoder2;
wire  recv_byte_en;

//=======================================================
//  Structural coding
//=======================================================



assign LEDR[0] = ~KEY[0];



uart my_uart( 	.clk(CLOCK_50),
					.rst(~KEY[0]),
					.rx(GPIO[3]),
					.tx(GPIO[1]),
					.transmit(recv_byte_en),
					.tx_byte(tx_byte),
					.rx_byte(recv_byte),
					.is_receiving(LEDR[8]),
					.is_transmitting(LEDR[7]),
					.received(recv_byte_en),
					.recv_error(LEDR[9]));
					
BSR my_bsr(
	.clk(CLOCK_50),
	.rst_n(KEY[0]),
	.en(recv_byte_en),
	.byte_in(recv_byte),
	.byte_probe0(bsr2decoder0),
	.byte_probe1(bsr2decoder1),
	.byte_probe2(bsr2decoder2),
	.byte_out(tx_byte)
);
		
	
HexDigit hexdecoder0 (.segs(HEX0), .num(bsr2decoder0[3:0]));
HexDigit hexdecoder1 (.segs(HEX1), .num(bsr2decoder0[7:4]));
HexDigit hexdecoder2 (.segs(HEX2), .num(bsr2decoder1[3:0]));
HexDigit hexdecoder3 (.segs(HEX3), .num(bsr2decoder1[7:4]));
HexDigit hexdecoder4 (.segs(HEX4), .num(bsr2decoder2[3:0]));
HexDigit hexdecoder5 (.segs(HEX5), .num(bsr2decoder2[7:4]));

		
endmodule
