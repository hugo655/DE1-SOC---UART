
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire [7:0] gen2display, uart2display, recv_byte;

wire back2back, recv_byte_en;

//=======================================================
//  Structural coding
//=======================================================


assign LEDR[0] = ~KEY[0];

uart my_uart( 	.clk(CLOCK_50),
					.rst(~KEY[0]),
					.rx(back2back),
					.tx(back2back),
					.transmit(~KEY[3]),
					.tx_byte(gen2display),
					.rx_byte(recv_byte),
					.is_receiving(LEDR[8]),
					.is_transmitting(LEDR[7]),
					.received(recv_byte_en),
					.recv_error(LEDR[9]));
					
byte_reg received_byte( .clk(CLOCK_50),
								.en(recv_byte_en),
								.byte_in(recv_byte),
								.byte_out(uart2display),
								.rst_n(KEY[0]));


gen_hex lower_nibble(.switch(~KEY[1]),.rst_n(KEY[0]),.hex_number(gen2display[3:0]));
gen_hex upper_nibble(.switch(~KEY[2]),.rst_n(KEY[0]),.hex_number(gen2display[7:4]));

// Transmited Byte
HexDigit hex_display_lower_tx(.num(gen2display[3:0]),.segs(HEX4));
HexDigit hex_display_upper_tx(.num(gen2display[7:4]),.segs(HEX5));

// Received Byte
HexDigit hex_display_lower_rx(.num(uart2display[3:0]),.segs(HEX0));
HexDigit hex_display_upper_rx(.num(uart2display[7:4]),.segs(HEX1));
endmodule
